<template>
  <AppLayout>
    <div class="p-4">
      <div v-if="currentChannel">
        <h2 class="text-xl font-bold mb-4"># {{ currentChannel.name }}</h2>
        
        <!-- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ #–ª–µ–∫—Ü–∏—è -->
        <StreamView v-if="currentChannel.id === 'lecture'" />
        
        <!-- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ #–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è -->
        <AchievementSystem 
          v-else-if="currentChannel.id === 'achievements'" 
          :student-id="userStore.id" 
        />
        
        <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ -->
        <div v-else class="bg-discord-secondary p-4 rounded-lg">
          <div ref="messagesContainer" class="messages-container max-h-[60vh] overflow-y-auto mb-4 pr-2">
            <!-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è -->
            <message-item 
              v-for="message in channelMessages" 
              :key="message.id" 
              :message="message"
              @toggle-reaction="handleReaction"
            />
            
            <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è -->
            <div v-if="isTyping" class="text-xs text-discord-text-gray ml-12 mb-2">
              –ö—Ç–æ-—Ç–æ –ø–µ—á–∞—Ç–∞–µ—Ç...
            </div>
          </div>
          
          <!-- –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è -->
          <div class="mt-4">
            <!-- –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π -->
            <div class="flex items-center mb-2">
              <button 
                class="text-discord-text-gray hover:text-white p-1 mr-2"
                @click="showEmojiPicker = !showEmojiPicker"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </button>
              
              <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ -->
              <button 
                class="text-discord-text-gray hover:text-white p-1 mr-2"
                @click="$refs.fileInput.click()"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13" />
                </svg>
              </button>
              <input 
                ref="fileInput" 
                type="file" 
                class="hidden" 
                @change="handleFileSelected" 
                multiple 
              />
              
              <!-- –≠–º–æ–¥–∑–∏-–ø–∏–∫–µ—Ä -->
              <div v-if="showEmojiPicker" class="absolute bg-discord-primary p-2 rounded-lg shadow-lg z-10">
                <div class="grid grid-cols-8 gap-1">
                  <button 
                    v-for="emoji in emojis" 
                    :key="emoji" 
                    @click="insertEmoji(emoji)"
                    class="text-xl p-1 hover:bg-discord-secondary rounded"
                  >
                    {{ emoji }}
                  </button>
                </div>
              </div>
            </div>
            
            <!-- –ü—Ä–µ–≤—å—é –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ -->
            <div v-if="selectedFiles.length > 0" class="selected-files mb-2 flex flex-wrap gap-2">
              <div v-for="(file, index) in selectedFiles" :key="index" class="file-preview bg-discord-dark rounded p-2 flex items-center">
                <div class="truncate max-w-[100px] text-xs">{{ file.name }}</div>
                <button @click="removeFile(index)" class="ml-2 text-discord-text-gray hover:text-discord-error">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            
            <div class="flex">
              <input
                v-model="newMessage"
                @keyup.enter="sendMessage"
                @input="handleTyping"
                type="text"
                class="flex-1 px-3 py-2 bg-discord-primary border border-gray-700 rounded-l-md focus:outline-none focus:ring-1 focus:ring-discord-accent"
                placeholder="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                :disabled="currentChannel.isReadOnly && !isTeacher"
              />
              <button
                @click="sendMessage"
                class="bg-discord-accent px-4 py-2 rounded-r-md hover:bg-opacity-90"
                :disabled="currentChannel.isReadOnly && !isTeacher || (!newMessage.trim() && selectedFiles.length === 0)"
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å
              </button>
            </div>
            
            <div v-if="currentChannel.isReadOnly && !isTeacher" class="mt-2 text-sm text-discord-text-gray">
              –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
            </div>
          </div>
        </div>
      </div>
    </div>
  </AppLayout>
</template>

<script setup>
import { ref, computed, watch, nextTick, onMounted, onUnmounted } from 'vue'
import AppLayout from '../components/layout/AppLayout.vue'
import StreamView from '../components/stream/StreamView.vue'
import MessageItem from '../components/chat/MessageItem.vue'
import AchievementSystem from '../components/gamification/AchievementSystem.vue'
import { useUserStore } from '../stores/user'
import { useChannelStore } from '../stores/channels'

const userStore = useUserStore()
const channelStore = useChannelStore()

const messagesContainer = ref(null)
const fileInput = ref(null)
const newMessage = ref('')
const showEmojiPicker = ref(false)
const isTyping = ref(false)
const typingTimeout = ref(null)
const selectedFiles = ref([])

// –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–∏–∫–µ—Ä–∞
const emojis = ['üòÄ', 'üòÇ', 'üòä', '‚ù§Ô∏è', 'üëç', 'üéâ', 'üî•', 'ü§î', 'üòé', 'üò¢', 'üò°', 'ü•≥', 'ü§©', 'üòç', 'üëè', 'üôè']

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â
const isTeacher = computed(() => userStore.role === 'teacher')
const username = computed(() => userStore.username)
const currentChannel = computed(() => channelStore.currentChannel)
const channelMessages = computed(() => channelStore.channelMessages)

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
const sendMessage = () => {
  if ((!newMessage.value.trim() && selectedFiles.length === 0) || 
      (currentChannel.value.isReadOnly && !isTeacher.value)) return
  
  const attachments = selectedFiles.value.map((file, index) => ({
    id: Date.now() + index,
    name: file.name,
    size: file.size,
    type: file.type,
    url: URL.createObjectURL(file)
  }))
  
  channelStore.addMessage({
    username: username.value,
    content: newMessage.value,
    attachments
  })
  
  newMessage.value = ''
  selectedFiles.value = []
  showEmojiPicker.value = false
  scrollToBottom()
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
const handleFileSelected = (e) => {
  const files = Array.from(e.target.files)
  selectedFiles.value = [...selectedFiles.value, ...files]
  // –û—á–∏—Å—Ç–∫–∞ input –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ç–µ—Ö –∂–µ —Ñ–∞–π–ª–æ–≤
  fileInput.value.value = ''
}

const removeFile = (index) => {
  selectedFiles.value = selectedFiles.value.filter((_, i) => i !== index)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–π
const handleReaction = (messageId, emoji) => {
  channelStore.toggleReaction({
    messageId,
    emoji,
    userId: userStore.id || 1
  })
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
const handleTyping = () => {
  isTyping.value = true
  clearTimeout(typingTimeout.value)
  
  typingTimeout.value = setTimeout(() => {
    isTyping.value = false
  }, 3000)
}

// –í—Å—Ç–∞–≤–∫–∞ —ç–º–æ–¥–∑–∏
const insertEmoji = (emoji) => {
  newMessage.value += emoji
  showEmojiPicker.value = false
}

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —á–∞—Ç–∞ –≤–Ω–∏–∑
const scrollToBottom = () => {
  nextTick(() => {
    if (messagesContainer.value) {
      messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight
    }
  })
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
watch(() => channelMessages.value.length, () => {
  scrollToBottom()
})

// –ó–∞–∫—Ä—ã—Ç–∏–µ —ç–º–æ–¥–∑–∏-–ø–∏–∫–µ—Ä–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
const closeEmojiPicker = (e) => {
  if (showEmojiPicker.value && !e.target.closest('.emoji-picker')) {
    showEmojiPicker.value = false
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/—Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
onMounted(() => {
  document.addEventListener('click', closeEmojiPicker)
  scrollToBottom()
})

onUnmounted(() => {
  document.removeEventListener('click', closeEmojiPicker)
  clearTimeout(typingTimeout.value)
})
</script>

<style scoped>
.messages-container {
  scrollbar-width: thin;
  scrollbar-color: rgba(114, 118, 125, 0.3) transparent;
}

.messages-container::-webkit-scrollbar {
  width: 8px;
}

.messages-container::-webkit-scrollbar-track {
  background: transparent;
}

.messages-container::-webkit-scrollbar-thumb {
  background-color: rgba(114, 118, 125, 0.3);
  border-radius: 4px;
}
</style>
