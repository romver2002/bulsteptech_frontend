<template>
  <AppLayout>
    <div class="p-4">
      <div v-if="currentChannel">
        <h2 class="text-xl font-bold mb-4"># {{ currentChannel.name }}</h2>
        
        <!-- Компонент трансляции для канала #лекция -->
        <StreamView v-if="currentChannel.id === 'lecture'" />
        
        <!-- Расписание для канала #расписание -->
        <div v-else-if="currentChannel.id === 'schedule'" class="bg-discord-secondary p-4 rounded-lg">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold">Расписание занятий</h3>
            <button
              @click="showAddScheduleForm = !showAddScheduleForm"
              class="px-3 py-1 bg-discord-accent rounded"
            >
              {{ showAddScheduleForm ? 'Отмена' : 'Добавить занятие' }}
            </button>
          </div>
          
          <!-- Форма добавления занятия -->
          <div v-if="showAddScheduleForm" class="mb-4 p-3 bg-discord-primary rounded">
            <h4 class="text-md font-semibold mb-2">Новое занятие</h4>
            <div class="space-y-3">
              <div>
                <label class="block text-sm mb-1">Тема</label>
                <input 
                  v-model="newScheduleItem.title" 
                  type="text" 
                  class="w-full px-3 py-2 bg-discord-secondary border border-gray-700 rounded"
                />
              </div>
              <div>
                <label class="block text-sm mb-1">Дата</label>
                <input 
                  v-model="newScheduleItem.date" 
                  type="date" 
                  class="w-full px-3 py-2 bg-discord-secondary border border-gray-700 rounded"
                />
              </div>
              <div>
                <label class="block text-sm mb-1">Время</label>
                <input 
                  v-model="newScheduleItem.time" 
                  type="time" 
                  class="w-full px-3 py-2 bg-discord-secondary border border-gray-700 rounded"
                />
              </div>
              <div>
                <label class="block text-sm mb-1">Описание</label>
                <textarea 
                  v-model="newScheduleItem.description" 
                  rows="3" 
                  class="w-full px-3 py-2 bg-discord-secondary border border-gray-700 rounded"
                ></textarea>
              </div>
              <div class="flex justify-end">
                <button
                  @click="addScheduleItem"
                  class="px-4 py-2 bg-discord-success rounded"
                >
                  Сохранить
                </button>
              </div>
            </div>
          </div>
          
          <!-- Таблица расписания -->
          <div class="overflow-x-auto">
            <table class="w-full text-left">
              <thead>
                <tr class="border-b border-gray-700">
                  <th class="px-4 py-2">Дата</th>
                  <th class="px-4 py-2">Время</th>
                  <th class="px-4 py-2">Тема</th>
                  <th class="px-4 py-2">Действия</th>
                </tr>
              </thead>
              <tbody>
                <tr 
                  v-for="(item, index) in scheduleItems" 
                  :key="index"
                  class="border-b border-gray-700"
                >
                  <td class="px-4 py-2">{{ item.date }}</td>
                  <td class="px-4 py-2">{{ item.time }}</td>
                  <td class="px-4 py-2">{{ item.title }}</td>
                  <td class="px-4 py-2">
                    <button
                      @click="deleteScheduleItem(index)"
                      class="text-discord-error hover:underline"
                    >
                      Удалить
                    </button>
                  </td>
                </tr>
                <tr v-if="scheduleItems.length === 0">
                  <td colspan="4" class="px-4 py-2 text-center text-discord-text-gray">
                    Нет запланированных занятий
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
        
        <!-- Компонент аналитики для канала #аналитика -->
        <PerformanceAnalytics v-else-if="currentChannel.id === 'analytics'" :course-id="1" />
        
        <!-- Контент для других каналов -->
        <div v-else class="bg-discord-secondary p-4 rounded-lg">
          <div v-for="message in channelMessages" :key="message.id" class="mb-4">
            <div class="flex items-start">
              <div class="bg-gray-700 w-10 h-10 rounded-full flex-shrink-0 flex items-center justify-center">
                {{ message.username.charAt(0).toUpperCase() }}
              </div>
              <div class="ml-3 flex-1">
                <div class="flex items-center justify-between">
                  <div>
                    <span class="font-medium">{{ message.username }}</span>
                    <span class="ml-2 text-xs text-discord-text-gray">{{ formatTime(message.timestamp) }}</span>
                  </div>
                  <button
                    v-if="isTeacher"
                    @click="deleteMessage(message.id)"
                    class="text-discord-text-gray hover:text-discord-error"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                  </button>
                </div>
                <p class="text-discord-text-light">{{ message.content }}</p>
              </div>
            </div>
          </div>
          
          <!-- Форма отправки сообщения -->
          <div class="mt-4">
            <div class="flex">
              <input
                v-model="newMessage"
                @keyup.enter="sendMessage"
                type="text"
                class="flex-1 px-3 py-2 bg-discord-primary border border-gray-700 rounded-l-md focus:outline-none focus:ring-1 focus:ring-discord-accent"
                placeholder="Отправить сообщение..."
              />
              <button
                @click="sendMessage"
                class="bg-discord-accent px-4 py-2 rounded-r-md hover:bg-opacity-90"
              >
                Отправить
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </AppLayout>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import AppLayout from '../components/layout/AppLayout.vue'
import StreamView from '../components/stream/StreamView.vue'
import PerformanceAnalytics from '../components/analytics/PerformanceAnalytics.vue'
import { useUserStore } from '../stores/user'
import { useChannelStore } from '../stores/channels'

const userStore = useUserStore()
const channelStore = useChannelStore()

const newMessage = ref('')
const showAddScheduleForm = ref(false)
const newScheduleItem = ref({
  title: '',
  date: '',
  time: '',
  description: ''
})
const scheduleItems = ref([])

// Загрузка расписания из localStorage
onMounted(() => {
  const savedSchedule = localStorage.getItem('scheduleItems')
  if (savedSchedule) {
    scheduleItems.value = JSON.parse(savedSchedule)
  }
})

// Получаем данные из хранилищ
const isTeacher = computed(() => userStore.isTeacher)
const username = computed(() => userStore.username)
const currentChannel = computed(() => channelStore.currentChannel)
const channelMessages = computed(() => channelStore.channelMessages)

// Методы
const sendMessage = () => {
  if (!newMessage.value.trim()) return
  
  channelStore.addMessage({
    username: username.value,
    content: newMessage.value
  })
  
  newMessage.value = ''
}

const deleteMessage = (messageId) => {
  const index = channelStore.messages.findIndex(m => m.id === messageId)
  if (index !== -1) {
    channelStore.messages.splice(index, 1)
  }
}

const addScheduleItem = () => {
  if (!newScheduleItem.value.title || !newScheduleItem.value.date || !newScheduleItem.value.time) {
    alert('Пожалуйста, заполните обязательные поля')
    return
  }
  
  scheduleItems.value.push({ ...newScheduleItem.value })
  
  // Сохраняем в localStorage
  localStorage.setItem('scheduleItems', JSON.stringify(scheduleItems.value))
  
  // Сбрасываем форму
  newScheduleItem.value = {
    title: '',
    date: '',
    time: '',
    description: ''
  }
  
  showAddScheduleForm.value = false
}

const deleteScheduleItem = (index) => {
  scheduleItems.value.splice(index, 1)
  localStorage.setItem('scheduleItems', JSON.stringify(scheduleItems.value))
}

// Форматирование времени
const formatTime = (timestamp) => {
  const date = new Date(timestamp)
  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
}
</script>
